# License: https://github.com/groovenectar/musiview/blob/master/LICENSE.md
# Homepage: https://c.dup.bz

user www-data;
worker_processes auto;
# Maximum number of open files per worker process.
# Should be > worker_connections.
# Default: no limit
# https://nginx.org/en/docs/ngx_core_module.html#worker_rlimit_nofile
worker_rlimit_nofile 8192;
pid /run/nginx.pid;
error_log /var/log/nginx/error.log warn;
load_module "/etc/nginx/modules-enabled/ngx_rtmp_module.so";

events {
	# Should be < worker_rlimit_nofile.
	# Default: 512
	# https://nginx.org/en/docs/ngx_core_module.html#worker_connections
	worker_connections 8000;
	multi_accept on;
}

http {
	#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
	#                  '$status $body_bytes_sent "$http_referer" '
	#                  '"$http_user_agent" "$http_x_forwarded_for"';

	sendfile on;
	tcp_nopush on;
	types_hash_max_size 2048;
	server_tokens off;

	#server_names_hash_bucket_size 64;
	#server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	# How long to allow each connection to stay idle.
	# Longer values are better for each individual client, particularly for SSL,
	# but means that worker connections are tied up longer.
	# Default: 75s
	# https://nginx.org/en/docs/http/ngx_http_core_module.html#keepalive_timeout
	keepalive_timeout 80;

	##
	# SSL Settings
	##
	#ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE
	#ssl_protocols TLSv1.3 TLSv1.2 TLSv1.1 TLSv1 ; # Dropping SSLv3, ref: POODLE
	ssl_session_timeout 24h;
	ssl_session_cache shared:SSL:10m;

	# (4) Disable session tickets
	#     Session tickets keys are not auto-rotated. Only a HUP / restart will do
	#     so and when a restart is performed the previous key is lost, which resets
	#     all previous sessions.
	#     Only enable session tickets if you set up a manual rotation mechanism.
	#     https://trac.nginx.org/nginx/changeset/1356a3b9692441e163b4e78be4e9f5a46c7479e9/nginx
	#     https://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_session_tickets
	ssl_session_tickets off;

	# (5) The TLS 1.2 and 1.3 ciphers in use in current policies are not considered
	#     dangerous. This directive let the client choose the one that best fits their needs.
	#     https://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_prefer_server_ciphers
	#     https://wiki.mozilla.org/Security/Server_Side_TLS
	ssl_prefer_server_ciphers off;

	##
	# Logging Settings
	##

	gzip  on;

	# Compression level (1-9).
	# 5 is a perfect compromise between size and CPU usage, offering about 75%
	# reduction for most ASCII files (almost identical to level 9).
	# Default: 1
	gzip_comp_level 5;

	# Don't compress anything that's already small and unlikely to shrink much if at
	# all (the default is 20 bytes, which is bad as that usually leads to larger
	# files after gzipping).
	# Default: 20
	gzip_min_length 256;

	# Tell proxies to cache both the gzipped and regular version of a resource
	# whenever the client's Accept-Encoding capabilities header varies;
	# Avoids the issue where a non-gzip capable client (which is extremely rare
	# today) would display gibberish if their proxy gave them the gzipped version.
	# Default: off
	gzip_vary on;

	# Compress all output labeled with one of the following MIME-types.
	# `text/html` is always compressed by gzip module.
	# Default: text/html
	gzip_types application/atom+xml application/geo+json application/javascript application/x-javascript application/json application/ld+json application/manifest+json application/rdf+xml application/rss+xml application/xhtml+xml application/xml font/eot font/otf font/ttf image/svg+xml image/vnd.microsoft.icon image/x-icon text/cache-manifest text/calendar text/css text/javascript text/markdown text/plain text/xml text/vcard text/vtt text/x-component text/x-cross-domain-policy;

	server {
		server_name staging.stream.dup.bz;

		listen 4443 ssl;
		ssl_certificate /run/secrets/domain_cert;
		ssl_certificate_key /run/secrets/domain_cert_key;

		access_log /var/log/nginx/stream.dup.bz_access.log;
		error_log /var/log/nginx/stream.dup.bz_error.log warn;

		add_header Cache-Control no-cache;
		add_header 'Access-Control-Allow-Origin' '*' always;
		add_header 'Access-Control-Expose-Headers' 'Content-Length';

		location /hls {
			# Serve HLS fragments
			types {
				application/vnd.apple.mpegurl m3u8;
				video/mp2t ts;
			}
			root /tmp;
		}

		location /status {
			include fastcgi_params;
			fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;
			fastcgi_param SCRIPT_FILENAME /app/system/deploy/docker/musiview-streaming/status.php;
			include fastcgi_params;
		}

		# Prevent some browsers from MIME-sniffing the response.
		#
		# This reduces exposure to drive-by download attacks and cross-origin data
		# leaks, and should be left uncommented, especially if the server is serving
		# user-uploaded content or content that could potentially be treated as
		# executable by the browser.
		#
		# https://owasp.org/www-project-secure-headers/#x-content-type-options
		# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
		# https://blogs.msdn.microsoft.com/ie/2008/07/02/ie8-security-part-v-comprehensive-protection/
		# https://mimesniff.spec.whatwg.org/
		add_header X-Content-Type-Options nosniff always;
	}
	server {
		server_name staging.stream.dup.bz;
		listen 8080;
		location /on_publish {
			include fastcgi_params;
			fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;
			fastcgi_param SCRIPT_FILENAME /app/system/deploy/docker/musiview-streaming/on-publish.php;
			include fastcgi_params;
		}
	}
}

rtmp {
	access_log /var/log/nginx/rtmp-access.log;

	server {
		listen 1936;
		chunk_size 4096;
		ping 1m;
		ping_timeout 1m;
		notify_method get;
		on_publish http://127.0.0.1:8080/on_publish;

		# for each received stream, transcode for adaptive streaming
		# This single ffmpeg command takes the input and transforms
		# the source into 4 different streams with different bitrates
		# and qualities. # these settings respect the aspect ratio.
		#exec_push  /usr/local/bin/ffmpeg -i rtmp://localhost:1935/$app/$name -async 1 -vsync -1
		#			-c:v libx264 -c:a aac -b:v 256k  -b:a 64k  -vf "scale=480:trunc(ow/a/2)*2"  -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/show/$name_low
		#			-c:v libx264 -c:a aac -b:v 768k  -b:a 128k -vf "scale=720:trunc(ow/a/2)*2"  -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/show/$name_mid
		#			-c:v libx264 -c:a aac -b:v 1024k -b:a 128k -vf "scale=960:trunc(ow/a/2)*2"  -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/show/$name_high
		#			-c:v libx264 -c:a aac -b:v 1920k -b:a 128k -vf "scale=1280:trunc(ow/a/2)*2" -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/show/$name_hd720
		#			-c copy -f flv rtmp://localhost:1935/show/$name_src;

		# HLS

		# For HLS to work please create a directory in tmpfs (/tmp/hls here)
		# for the fragments. The directory contents is served via HTTP (see
		# http{} section in config)
		#
		# Incoming stream must be in H264/AAC. For iPhones use baseline H264
		# profile (see ffmpeg example).
		# This example creates RTMP stream from movie ready for HLS:
		#
		# ffmpeg -loglevel verbose -re -i movie.avi  -vcodec libx264
		#    -vprofile baseline -acodec libmp3lame -ar 44100 -ac 1
		#    -f flv rtmp://localhost:1935/hls/movie
		#
		# If you need to transcode live stream use 'exec' feature.
		#
		application hls {
			live on;
			record off;
			hls on;
			hls_path /tmp/hls;
			hls_playlist_length 36s;
			hls_fragment 6s;
			#https://help.twitch.tv/s/twitch-ingest-recommendation
			#pusher pushes;
		}
	}
}
